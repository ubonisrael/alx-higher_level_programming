=========================
Help for text_indentation
=========================

``lazy_matrix_mul(m_a, m_b) is a function that multiplies 2 matrices. m_a and m_b
must be a list of lists of integers or floats, else errors are raised.
The number of columns in m_a must be equal to the number of rows in m_b
for multiplication to be possible.

::


Text must be a string, otherwise a TypeError is raised.

::

	>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul
	>>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
	[[ 7 10]
	 [15 22]]
	>>> print(lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]]))
	[[13 16]]
	>>> print(lazy_matrix_mul([[2, 3, 1], [7, 4, 1], [9, -2, 1]], [[9, -2, -1], [5, 7, 3], [8, 1, 0]]))
	[[ 41  18   7]
	 [ 91  15   5]
	 [ 79 -31 -15]]
	>>> print(lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]]))
	[[13 16]]


The function also works with floats.

::

	>>> print(lazy_matrix_mul([[1.1, 2.2], [4.4, -6.2], [0.0, 4.5]], [[-3.1], [7.8]]))
	[[ 13.75]
	 [-62.  ]
	 [ 35.1 ]]


FLoats and integers can also be combined.

::

	>>> print(lazy_matrix_mul([[1.2, 2], [4.0, -6], [0, 4.5]], [[-3.5], [7]]))
	[[  9.8]
	 [-56. ]
	 [ 31.5]]


m_a and m_b must be lists

::
	>>> print(lazy_matrix_mul('lisi', [[3, 4], [4, 5]]))
	Traceback (most recent call last):
	    ...
	ValueError: Scalar operands are not allowed, use '*' instead
	>>> print(lazy_matrix_mul([[1, 2]], 'list'))
	Traceback (most recent call last):
	    ...
	ValueError: Scalar operands are not allowed, use '*' instead


m_a and m_b must be list of lists

::

	>>> print(lazy_matrix_mul([1, 2], [3, 4, 4, 5]))
	Traceback (most recent call last):
	    ...
	ValueError: shapes (2,) and (4,) not aligned: 2 (dim 0) != 4 (dim 0)
	>>> print(lazy_matrix_mul([[1, 2]], [3, 4, 4, 5]))
	Traceback (most recent call last):
	    ...
	ValueError: shapes (1,2) and (4,) not aligned: 2 (dim 1) != 4 (dim 0)


m_a and m_b must be a list of lists of integers or floats

::

	>>> print(lazy_matrix_mul([['1', 2]], [[3, '4'], [4, 5]]))
	Traceback (most recent call last):
	    ...
	TypeError: invalid data type for einsum
	>>> print(lazy_matrix_mul([[1, 2]], [[3, '4'], [4, 5]]))
	Traceback (most recent call last):
	    ...
	TypeError: invalid data type for einsum

m_a and m_b should not be empty

::

	>>> print(lazy_matrix_mul([], [[3, 4], [4, 5]]))
	Traceback (most recent call last):
	    ...
	ValueError: shapes (0,) and (2,2) not aligned: 0 (dim 0) != 2 (dim 0)
	>>> print(lazy_matrix_mul([[]], [[3, 4], [4, 5]]))
	Traceback (most recent call last):
	    ...
	ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)
	>>> print(lazy_matrix_mul([[1, 2]], []))
	Traceback (most recent call last):
	    ...
	ValueError: shapes (1,2) and (0,) not aligned: 2 (dim 1) != 0 (dim 0)
	>>> print(lazy_matrix_mul([[1, 2]], [[]]))
	Traceback (most recent call last):
	    ...
	ValueError: shapes (1,2) and (1,0) not aligned: 2 (dim 1) != 0 (dim 0)

Each row of m_a and m_b must have the same size

::

	>>> print(lazy_matrix_mul([[1, 2], [1, 2, 3]], [[3, 4, 6], [4, 5]]))
	Traceback (most recent call last):
	    ...
	ValueError: setting an array element with a sequence
	>>> print(lazy_matrix_mul([[1, 2]], [[3, 4, 6], [4, 5]]))
	Traceback (most recent call last):
	    ...
	ValueError: setting an array element with a sequence

The number of rows in m_a must be equal to the number of rows in m_b

::

	>>> print(lazy_matrix_mul([[1, 2, 5]], [[3, 4, 6], [4, 5, 7]]))
	Traceback (most recent call last):
	    ...
	ValueError: shapes (1,3) and (2,3) not aligned: 3 (dim 1) != 2 (dim 0)
	>>> print(lazy_matrix_mul([[1, 2, 5, 4]], [[3, 4, 6], [4, 5, 7]]))
	Traceback (most recent call last):
	    ...
	ValueError: shapes (1,4) and (2,3) not aligned: 4 (dim 1) != 2 (dim 0)

m_a and m_b must BOTH be passed to the function

::

	>>> print(lazy_matrix_mul())
	Traceback (most recent call last):
	    ...
	TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
	>>> print(lazy_matrix_mul([[1, 2, 3]]))
	Traceback (most recent call last):
	    ...
	TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'
